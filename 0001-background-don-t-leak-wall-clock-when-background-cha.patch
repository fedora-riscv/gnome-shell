From 237643a99a20ed173d149162d7c525ffb5dfb1d7 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Fri, 15 Dec 2017 10:05:34 -0500
Subject: [PATCH] background: don't leak wall clock when background changes

The background code allocates a GnomeWallClock when its first created,
but neglects to drop a reference to that clock at destroy time.
The undestroyed clocks lead to a timerfd leak that eventually prevents
the shell from functioning.
---
 js/ui/background.js | 2 ++
 1 file changed, 2 insertions(+)

https://bugzilla.gnome.org/show_bug.cgi?id=791655

diff --git a/js/ui/background.js b/js/ui/background.js
index 1c2b83bae..3ea7900e7 100644
--- a/js/ui/background.js
+++ b/js/ui/background.js
@@ -262,60 +262,62 @@ var Background = new Lang.Class({
         let loginManager = LoginManager.getLoginManager();
         this._prepareForSleepId = loginManager.connect('prepare-for-sleep',
             (lm, aboutToSuspend) => {
                 if (aboutToSuspend)
                     return;
                 this._refreshAnimation();
             });
 
         this._settingsChangedSignalId = this._settings.connect('changed', Lang.bind(this, function() {
                                             this.emit('changed');
                                         }));
 
         this._load();
     },
 
     destroy: function() {
         this._cancellable.cancel();
         this._removeAnimationTimeout();
 
         let i;
         let keys = Object.keys(this._fileWatches);
         for (i = 0; i < keys.length; i++) {
             this._cache.disconnect(this._fileWatches[keys[i]]);
         }
         this._fileWatches = null;
 
         if (this._timezoneChangedId != 0)
             this._clock.disconnect(this._timezoneChangedId);
         this._timezoneChangedId = 0;
 
+        this._clock = null;
+
         if (this._prepareForSleepId != 0)
             LoginManager.getLoginManager().disconnect(this._prepareForSleepId);
         this._prepareForSleepId = 0;
 
         if (this._settingsChangedSignalId != 0)
             this._settings.disconnect(this._settingsChangedSignalId);
         this._settingsChangedSignalId = 0;
     },
 
     updateResolution: function() {
         if (this._animation)
             this._refreshAnimation();
     },
 
     _refreshAnimation: function() {
         if (!this._animation)
             return;
 
         this._removeAnimationTimeout();
         this._updateAnimation();
     },
 
     _setLoaded: function() {
         if (this.isLoaded)
             return;
 
         this.isLoaded = true;
 
         let id = GLib.idle_add(GLib.PRIORITY_DEFAULT, Lang.bind(this, function() {
             this.emit('loaded');
-- 
2.14.3

